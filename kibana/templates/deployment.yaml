apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ .Chart.Name }}
    release: {{ .Release.Name | quote }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
{{ toYaml .Values.updateStrategy | indent 4 }}
  selector:
    matchLabels:
      app: kibana
      release: {{ .Release.Name | quote }}
  template:
    metadata:
      labels:
        app: kibana
        release: {{ .Release.Name | quote }}
    spec:
      {{- if .Values.secretMounts }}
      volumes:
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .name }}
        {{- end }}
      {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
    {{- end }}
      containers:
      - name: kibana
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        env:
          - name: ELASTICSEARCH_URL
            value: "{{ .Values.elasticsearchURL }}"
{{- if .Values.extraEnvs }}
{{ toYaml .Values.extraEnvs | indent 10 }}
{{- end }}
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 10 }}
          exec:
            command: 
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                http () {
                    local path="${1}"
                    set -- -XGET -s --fail

                    if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                    fi

                    if [ "${SERVER_SSL_ENABLED}" = "true" ] ; then
                      set -- "$@" --cacert "${SERVER_SSL_CERTIFICATE}" --resolve "{{ .Values.kibanaSSLHostname }}:{{ .Values.httpPort }}:127.0.0.1"
                      URL="https://{{ .Values.kibanaSSLHostname }}:{{ .Values.httpPort }}${path}"
                    else
                      URL="http://localhost:{{ .Values.httpPort }}${path}"
                    fi
                    curl "$@" "${URL}"
                }
  
                http "/app/kibana"
        ports:
        - containerPort: {{ .Values.httpPort }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- if .Values.secretMounts }}
        volumeMounts:
          {{- range .Values.secretMounts }}
          - name: {{ .name }}
            mountPath: {{ .path }}
          {{- end }}
      {{- end }}
